name: Build Go binaries

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  OPUS_VERSION: 1.3.1

permissions:
  contents: write

jobs:
  build-windows-amd64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Install cross-compilation tools
        run: |
          sudo apt update
          sudo apt install -y mingw-w64 pkg-config build-essential wget

      - name: Configure env for Windows build
        run: |
          echo "CGO_ENABLED=1"                  >> $GITHUB_ENV
          echo "GOOS=windows"                   >> $GITHUB_ENV
          echo "GOARCH=amd64"                   >> $GITHUB_ENV
          echo "CC=x86_64-w64-mingw32-gcc"      >> $GITHUB_ENV

      - name: Build & compress Windows binaries
        run: |
          go mod tidy
          go build -v \
            -ldflags "-s -w -extldflags '-static'" \
            -o ../windows-amd64-sherpa-server.exe

      - name: Upload Windows binaries
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            windows-amd64-sherpa-server.exe

  build-linux:
    strategy:
      matrix:
        include:
          - arch: amd64
            runs-on: ubuntu-latest
          - arch: arm64
            runs-on: ubuntu-24.04-arm
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Compile & compress in container
        run: |
          docker run --rm --platform=linux/${{ matrix.arch }} \
            -v "${{ github.workspace }}:/src" \
            -w /src \
            golang:1.24.2 sh -c "\
              apt install -y build-base autoconf automake libtool pkgconfig && \
              go mod tidy && \
              CGO_ENABLED=1 GOOS=linux GOARCH=${{ matrix.arch }} \
                go build -v -ldflags '-s -w' \
                -o ../linux-${{ matrix.arch }}-sherpa-server
            "

      - name: Upload Linux binaries
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries-${{ matrix.arch }}
          path: |
            linux-${{ matrix.arch }}-sherpa-server

  build-android:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - arch: arm64
            target: aarch64-linux-android
            target_arch: arm64-v8a
          - arch: arm
            target: armv7a-linux-androideabi
            target_arch: armeabi-v7a

    env:
      OPUS_VERSION: 1.3.1
      NDK_VERSION: r26d
      ANDROID_API: 21

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v3
        with:
          path: |
            android-ndk-${{ env.NDK_VERSION }}
          key: ${{ runner.os }}-ndk-${{ env.NDK_VERSION }}

      - name: Download and set up Android NDK
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
          unzip android-ndk-${NDK_VERSION}-linux.zip

      - name: Set NDK environment
        run: |
          echo "NDK_DIR=$PWD/android-ndk-${NDK_VERSION}" >> $GITHUB_ENV
          echo "TOOLCHAIN=$PWD/android-ndk-${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV

      - name: Set up go build env
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "GOOS=android" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "CC=$TOOLCHAIN/bin/${{ matrix.target }}$ANDROID_API-clang" >> $GITHUB_ENV
          echo "CGO_CFLAGS=--sysroot=$TOOLCHAIN/sysroot" >> $GITHUB_ENV

      - name: Build Go binary for Android
        run: |
          go build -v -ldflags="-s -w" -o ../android-${{ matrix.arch }}-sherpa-server

      - name: Upload Android binary
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.arch }}-sherpa-server
          path: android-${{ matrix.arch }}-sherpa-server


  release:
    needs:
      - build-windows-amd64
      - build-linux
      - build-android
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows binaries
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries
          path: artifacts

      - name: Download Linux AMD64 binaries
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-amd64
          path: artifacts

      - name: Download Linux ARM64 binaries
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-arm64
          path: artifacts

      - name: Download Android ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: android-arm64-server
          path: artifacts

      - name: Download Android ARM binary
        uses: actions/download-artifact@v4
        with:
          name: android-arm-server
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name:    ${{ github.ref_name }}
          draft:   false
          prerelease: false
          files: |
            artifacts/android-arm64-sherpa-server
            artifacts/android-arm-sherpa-server
            artifacts/windows-amd64-sherpa-server.exe
            artifacts/linux-amd64-sherpa-server
            artifacts/linux-arm64-sherpa-server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}